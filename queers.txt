CREATE TABLE PreOwnedCars(
    id INTEGER PRIMARY KEY,
    CarModel TEXT,
    RentSale TEXT,
    Transmission TEXT,
    Engine TEXT,
    Mileage REAL,
    Doors TEXT,
    CarAtributtes TEXT,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);



CREATE TABLE RealState (
    id INTEGER PRIMARY KEY,
    PropertyType TEXT,
    RentSale TEXT,
    NumberOfRooms TEXT,
    NumberOfBathrooms TEXT,
    AreaM2 REAL,
    GarageSpace INTEGER,
    DependenciesID INTEGER,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);




CREATE TABLE HomeEssentials(
    id INTEGER PRIMARY KEY,
    Categorys TEXT,
    Conditions TEXT,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE TechEssentials(
    id INTEGER PRIMARY KEY,
    Type TEXT,
    Model TEXT,
    Conditions TEXT,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE MusicalInstrument(
    id INTEGER PRIMARY KEY,
    Type TEXT,
    Model TEXT,
    Conditions TEXT,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE Children_Items_Toys(
    id INTEGER PRIMARY KEY,
    Type TEXT,
    Conditions TEXT,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE Pets(
    id INTEGER PRIMARY KEY,
    Type TEXT,
    Conditions TEXT,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE Commerce_office(
    id INTEGER PRIMARY KEY,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE Fashion_Beauty(
    id INTEGER PRIMARY KEY,
    Type TEXT,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE Games(
    id INTEGER PRIMARY KEY,
    Type TEXT,
    Conditions TEXT,
    Price INTEGER,
    ImagesID INTEGER,
    Address TEXT,
    Contact TEXT,
    announce_id INTEGER,
    FOREIGN KEY (announce_id) REFERENCES announces(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);



all user announces :
SELECT 
    announces.*,
    PreOwnedCars.*,
    RealState.*
    
FROM announces
LEFT JOIN PreOwnedCars ON PreOwnedCars.announce_id = announces.id
LEFT JOIN RealState ON RealState.announce_id = announces.id
WHERE announces.user_id = display_username;



        user_ads = db.execute(
            "SELECT announces.*, PreOwnedCars.*, RealState.* FROM announces "
            "LEFT JOIN PreOwnedCars ON PreOwnedCars.announce_id = announces.id "
            "LEFT JOIN RealState ON RealState.announce_id = announces.id "
            "WHERE announces.user_id = ?;", user_id)







@app.route("/myads", methods=['GET', 'POST'])
@login_required
def ShowingUserAds():
    if request.method == "GET":
        if "user_id" in session:
            user_id = session["user_id"]
            # Executar a consulta e obter os resultados
            user_ads = db.execute(
                "SELECT announces.id, announces.title, "
                "CASE "
                "   WHEN announces.announcement_type = 'PreOwnedCars' THEN PreOwnedCars.Price "
                "   WHEN announces.announcement_type = 'RealState' THEN RealState.Price "
                "   WHEN announces.announcement_type = 'HomeEssentials' THEN HomeEssentials.Price "
                "   WHEN announces.announcement_type = 'TechEssentials' THEN TechEssentials.Price "
                "   WHEN announces.announcement_type = 'MusicalInstrument' THEN MusicalInstrument.Price "
                "   WHEN announces.announcement_type = 'Children_Items_Toys' THEN Children_Items_Toys.Price "
                "   WHEN announces.announcement_type = 'Pets' THEN Pets.Price "
                "   WHEN announces.announcement_type = 'Commerce_office' THEN Commerce_office.Price "
                "   WHEN announces.announcement_type = 'Fashion_Beauty' THEN Fashion_Beauty.Price "
                "   WHEN announces.announcement_type = 'Games' THEN Games.Price "
                "END AS price, "
                "AnnounceImages.image_data "
                "FROM announces "
                "LEFT JOIN PreOwnedCars ON PreOwnedCars.announce_id = announces.id AND announces.announcement_type = 'PreOwnedCars' "
                "LEFT JOIN RealState ON RealState.announce_id = announces.id AND announces.announcement_type = 'RealState' "
                "LEFT JOIN HomeEssentials ON HomeEssentials.announce_id = announces.id AND announces.announcement_type = 'HomeEssentials' "
                "LEFT JOIN TechEssentials ON TechEssentials.announce_id = announces.id AND announces.announcement_type = 'TechEssentials' "
                "LEFT JOIN MusicalInstrument ON MusicalInstrument.announce_id = announces.id AND announces.announcement_type = 'MusicalInstrument' "
                "LEFT JOIN Children_Items_Toys ON Children_Items_Toys.announce_id = announces.id AND announces.announcement_type = 'Children_Items_Toys' "
                "LEFT JOIN Pets ON Pets.announce_id = announces.id AND announces.announcement_type = 'Pets' "
                "LEFT JOIN Commerce_office ON Commerce_office.announce_id = announces.id AND announces.announcement_type = 'Commerce_office' "
                "LEFT JOIN Fashion_Beauty ON Fashion_Beauty.announce_id = announces.id AND announces.announcement_type = 'Fashion_Beauty' "
                "LEFT JOIN Games ON Games.announce_id = announces.id AND announces.announcement_type = 'Games' "
                "LEFT JOIN AnnounceImages ON AnnounceImages.announce_id = announces.id "
                "WHERE announces.user_id = ?;",
                user_id)


            # Processa cada an√∫ncio para converter e adicionar a imagem
            for ad in user_ads:
                if ad["image_data"]:
                    blob_data = ad["image_data"]
                    try:
                        image = Image.open(BytesIO(blob_data))
                        buffered = BytesIO()
                        image.save(buffered, format="PNG")
                        ad["image_data"] = base64.b64encode(buffered.getvalue()).decode("utf-8")
                    except Exception as e:
                        print(f"Erro ao processar a imagem: {e}")

            return render_template("Myads.html", user_ads=user_ads)
    else:
        id_announce = request.form.get("id_announce")

        announce_data = db.execute("""
            SELECT announces.*, AnnounceImages.*, 
                CASE
                    WHEN announces.announcement_type = 'PreOwnedCars' THEN 'PreOwnedCars'
                    WHEN announces.announcement_type = 'RealState' THEN 'RealState'
                    WHEN announces.announcement_type = 'HomeEssentials' THEN 'HomeEssentials'
                    WHEN announces.announcement_type = 'TechEssentials' THEN 'TechEssentials'
                    WHEN announces.announcement_type = 'MusicalInstrument' THEN 'MusicalInstrument'
                    WHEN announces.announcement_type = 'Children_Items_Toys' THEN 'Children_Items_Toys'
                    WHEN announces.announcement_type = 'Pets' THEN 'Pets'
                    WHEN announces.announcement_type = 'Commerce_office' THEN 'Commerce_office'
                    WHEN announces.announcement_type = 'Fashion_Beauty' THEN 'Fashion_Beauty'
                    WHEN announces.announcement_type = 'Games' THEN 'Games'
                    ELSE NULL
                END AS table_name
            FROM announces
            LEFT JOIN AnnounceImages ON AnnounceImages.announce_id = announces.id
            WHERE announces.id = ?
        """, id_announce)

        for ad in user_ads:
            if ad["image_data"]:
                blob_data = ad["image_data"]
                try:
                    image = Image.open(BytesIO(blob_data))
                    buffered = BytesIO()
                    image.save(buffered, format="PNG")
                    ad["image_data"] = base64.b64encode(buffered.getvalue()).decode("utf-8")
                except Exception as e:
                    print(f"Erro ao processar a imagem: {e}")

        return render_template("renderUserAD.html", data=announce_data)
